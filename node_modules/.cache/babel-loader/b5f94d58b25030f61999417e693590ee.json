{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\antar\\\\Desktop\\\\test_folder\\\\projectmouse\\\\src\\\\components\\\\counter.jsx\";\nimport React, { Component } from 'react';\n\nclass Counter extends Component {\n  constructor(...args) {\n    super(...args);\n    this.styles = {\n      fontSize: 50,\n      fontWeight: 'bold'\n    };\n  }\n\n  //used for optimization\n  componentDidUpdate(prevProps, prevState) {\n    console.log('prevProps', prevProps);\n    console.log('prevState', prevState);\n\n    if (prevProps.counter.value !== this.props.counter.value) {//ajax call and get new data from the server\n    }\n  } //garbage collection last phase when app closes\n\n\n  componentWillUnmount() {\n    console.log('Counter unmount');\n  }\n  /*\tstate = {\r\n  \t\tvalue: this.props.counter.value,\r\n  \t};*/\n\n\n  /*\tbinds event handlers\r\n  \r\n  \tconstructor(){\r\n  \t\tsuper();\r\n  \t\tthis.handleIncrement = this.handleIncrement.bind(this);\r\n  \t}*/\n\n  /*\teventhandleIncrement=(product)=>{\r\n  \t\tthis.setState({value:this.state.value + 1});\r\n  \t};\r\n  \r\n  \teventhandleDecrement=()=>{\r\n  \t\tthis.setState({value:this.state.value - 1});\r\n  \t};*/\n  render() {\n    //everything has props used to identify the properties of a component\n    //console.log('props', this.props);\n    console.log('counter - rendered');\n    return React.createElement(\"div\", {\n      className: \"counter-element\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, this.props.children, React.createElement(\"span\", {\n      style: this.styles,\n      className: this.getBadgeClasses(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, this.formatCount()), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: () => this.props.onIncrement(this.props.counter)\n      /*()=>this.eventhandleIncrement(product)*/\n      ,\n      className: \"butt\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, \"Increment\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: () => this.props.onDecrement(this.props.counter)\n      /*this.eventhandleDecrement*/\n      ,\n      className: \"butt\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, \"Decrement\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: () => this.props.onDelete(this.props.counter.id),\n      className: \"butt\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, \"Delete\"));\n  }\n\n  getBadgeClasses() {\n    let classes = 'answer-';\n    classes += this.props.counter.value === 0 ? 'bad' : 'good';\n    return classes;\n  }\n\n  formatCount() {\n    const {\n      value\n    } = this.props.counter;\n    return value === 0 ? 'Zero' : value;\n  }\n\n}\n\nexport default Counter;\n/*class Counter2 extends Component{\r\n\tstate = {\r\n\t\tvalue: 0,\r\n\t\ttags: ['tag1', 'tag2', 'tag3'],\r\n\t};\r\n\r\n\trenderTags(){\r\n\t\tif(this.state.tags.length == 0){\r\n\t\t\treturn <p>There are no tags</p>;\r\n\t\t} else{\r\n\t\t\treturn \t<ul className=\"list\">\r\n\t\t\t\t\t\t{this.state.tags.map(tag => <li key={tag}>{tag}</li>)}\r\n\t\t\t\t\t</ul>\r\n\t\t}\r\n\t}\r\n\r\n\trender(){\r\n\t\treturn (\r\n\t\t\t<React.Fragment>\r\n\t\t\t\t{this.state.tags.length === 0 && <p>Please create a new tag</p>}\r\n\t\t\t\t{this.renderTags()}\r\n\t\t\t</React.Fragment>\r\n\t\t);\r\n\t}\r\n}*/","map":{"version":3,"sources":["C:/Users/antar/Desktop/test_folder/projectmouse/src/components/counter.jsx"],"names":["React","Component","Counter","styles","fontSize","fontWeight","componentDidUpdate","prevProps","prevState","console","log","counter","value","props","componentWillUnmount","render","children","getBadgeClasses","formatCount","onIncrement","onDecrement","onDelete","id","classes"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;;AAEA,MAAMC,OAAN,SAAsBD,SAAtB,CAA+B;AAAA;AAAA;AAAA,SAkB9BE,MAlB8B,GAkBrB;AACRC,MAAAA,QAAQ,EAAC,EADD;AAERC,MAAAA,UAAU,EAAC;AAFH,KAlBqB;AAAA;;AAC9B;AACAC,EAAAA,kBAAkB,CAACC,SAAD,EAAYC,SAAZ,EAAsB;AACvCC,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBH,SAAzB;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBF,SAAzB;;AACA,QAAGD,SAAS,CAACI,OAAV,CAAkBC,KAAlB,KAA4B,KAAKC,KAAL,CAAWF,OAAX,CAAmBC,KAAlD,EAAwD,CACvD;AACA;AACD,GAR6B,CAU9B;;;AACAE,EAAAA,oBAAoB,GAAE;AACrBL,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACA;AACF;;;;;AASA;;;;;;;AAOA;;;;;;;AAQCK,EAAAA,MAAM,GAAE;AACP;AACA;AACAN,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACA,WACC;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEuD,KAAKG,KAAL,CAAWG,QAFlE,EAGC;AAAM,MAAA,KAAK,EAAE,KAAKb,MAAlB;AAA0B,MAAA,SAAS,EAAE,KAAKc,eAAL,EAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA8D,KAAKC,WAAL,EAA9D,CAHD,EAIC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJD,EAKC;AAAQ,MAAA,OAAO,EAAE,MAAI,KAAKL,KAAL,CAAWM,WAAX,CAAuB,KAAKN,KAAL,CAAWF,OAAlC;AAA0C;AAA/D;AAA2G,MAAA,SAAS,EAAC,MAArH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBALD,EAMC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAND,EAOC;AAAQ,MAAA,OAAO,EAAE,MAAI,KAAKE,KAAL,CAAWO,WAAX,CAAuB,KAAKP,KAAL,CAAWF,OAAlC;AAA0C;AAA/D;AAA8F,MAAA,SAAS,EAAC,MAAxG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAPD,EAQC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARD,EASC;AAAQ,MAAA,OAAO,EAAE,MAAI,KAAKE,KAAL,CAAWQ,QAAX,CAAoB,KAAKR,KAAL,CAAWF,OAAX,CAAmBW,EAAvC,CAArB;AAAiE,MAAA,SAAS,EAAC,MAA3E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBATD,CADD;AAaA;;AAEDL,EAAAA,eAAe,GAAE;AAChB,QAAIM,OAAO,GAAG,SAAd;AACAA,IAAAA,OAAO,IAAK,KAAKV,KAAL,CAAWF,OAAX,CAAmBC,KAAnB,KAA6B,CAA9B,GAAmC,KAAnC,GAA2C,MAAtD;AACA,WAAOW,OAAP;AACA;;AAEDL,EAAAA,WAAW,GAAE;AACZ,UAAM;AAACN,MAAAA;AAAD,QAAU,KAAKC,KAAL,CAAWF,OAA3B;AACA,WAAOC,KAAK,KAAK,CAAV,GAAc,MAAd,GAAuBA,KAA9B;AACA;;AAlE6B;;AAsE/B,eAAeV,OAAf;AAeA","sourcesContent":["import React, {Component} from 'react';\r\n\r\nclass Counter extends Component{\r\n\t//used for optimization\r\n\tcomponentDidUpdate(prevProps, prevState){\r\n\t\tconsole.log('prevProps', prevProps);\r\n\t\tconsole.log('prevState', prevState);\r\n\t\tif(prevProps.counter.value !== this.props.counter.value){\r\n\t\t\t//ajax call and get new data from the server\r\n\t\t}\r\n\t}\r\n\r\n\t//garbage collection last phase when app closes\r\n\tcomponentWillUnmount(){\r\n\t\tconsole.log('Counter unmount')\r\n\t}\r\n/*\tstate = {\r\n\t\tvalue: this.props.counter.value,\r\n\t};*/\r\n\r\n\tstyles = {\r\n\t\tfontSize:50,\r\n\t\tfontWeight:'bold',\r\n\t};\r\n\r\n/*\tbinds event handlers\r\n\r\n\tconstructor(){\r\n\t\tsuper();\r\n\t\tthis.handleIncrement = this.handleIncrement.bind(this);\r\n\t}*/\r\n\r\n/*\teventhandleIncrement=(product)=>{\r\n\t\tthis.setState({value:this.state.value + 1});\r\n\t};\r\n\r\n\teventhandleDecrement=()=>{\r\n\t\tthis.setState({value:this.state.value - 1});\r\n\t};*/\r\n \r\n\trender(){\r\n\t\t//everything has props used to identify the properties of a component\r\n\t\t//console.log('props', this.props);\r\n\t\tconsole.log('counter - rendered');\r\n\t\treturn (\r\n\t\t\t<div className=\"counter-element\">\r\n\r\n\t\t\t\t{/*<h4>{this.props.id}</h4> props is read only\tor */}{this.props.children}\r\n\t\t\t\t<span style={this.styles} className={this.getBadgeClasses()}>{this.formatCount()}</span>\r\n\t\t\t\t<br/>\r\n\t\t\t\t<button onClick={()=>this.props.onIncrement(this.props.counter)/*()=>this.eventhandleIncrement(product)*/} className=\"butt\">Increment</button>\r\n\t\t\t\t<br />\r\n\t\t\t\t<button onClick={()=>this.props.onDecrement(this.props.counter)/*this.eventhandleDecrement*/} className=\"butt\">Decrement</button>\r\n\t\t\t\t<br />\r\n\t\t\t\t<button onClick={()=>this.props.onDelete(this.props.counter.id)} className=\"butt\">Delete</button>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\r\n\tgetBadgeClasses(){\r\n\t\tlet classes = 'answer-';\r\n\t\tclasses += (this.props.counter.value === 0) ? 'bad' : 'good';\r\n\t\treturn classes;\r\n\t}\r\n\r\n\tformatCount(){\r\n\t\tconst {value} = this.props.counter;\r\n\t\treturn value === 0 ? 'Zero' : value;\r\n\t}\r\n}\r\n\r\n\r\nexport default Counter;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*class Counter2 extends Component{\r\n\tstate = {\r\n\t\tvalue: 0,\r\n\t\ttags: ['tag1', 'tag2', 'tag3'],\r\n\t};\r\n\r\n\trenderTags(){\r\n\t\tif(this.state.tags.length == 0){\r\n\t\t\treturn <p>There are no tags</p>;\r\n\t\t} else{\r\n\t\t\treturn \t<ul className=\"list\">\r\n\t\t\t\t\t\t{this.state.tags.map(tag => <li key={tag}>{tag}</li>)}\r\n\t\t\t\t\t</ul>\r\n\t\t}\r\n\t}\r\n\r\n\trender(){\r\n\t\treturn (\r\n\t\t\t<React.Fragment>\r\n\t\t\t\t{this.state.tags.length === 0 && <p>Please create a new tag</p>}\r\n\t\t\t\t{this.renderTags()}\r\n\t\t\t</React.Fragment>\r\n\t\t);\r\n\t}\r\n}*/\r\n\r\n"]},"metadata":{},"sourceType":"module"}